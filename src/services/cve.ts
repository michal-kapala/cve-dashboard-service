import 'cross-fetch/dist/node-polyfill.js';
import { pb } from '../pocketbase.js';
import {
  CveServiceImplementation,
  GetOneRequest,
  GetOneResponse,
  GetManyRequest,
  GetManyResponse,
  CreateRequest,
  CreateResponse,
  UpdateRequest,
  UpdateResponse,
  DeleteRequest,
  DeleteResponse,
  DeepPartial,
} from '../../proto/compiled_proto/cve.js';

/**
 * Implementation of CVE service (gRPC).
 */
export const cveServiceImpl: CveServiceImplementation = {

  async getOne(
    request: GetOneRequest,
  ): Promise<DeepPartial<GetOneResponse>> {
    // authenticate to pocketbase
    await pb.admins.authWithPassword(
      process.env.POCKETBASE_ADMIN_EMAIL ?? '',
      process.env.POCKETBASE_ADMIN_PASSWORD ?? ''
    );
    // test request
    const result = await pb.collection('cve').getOne('ncwlbfrcxhsjane');
    console.log(result);

    const response: GetOneResponse = {
      cve: {
        id: "",
        accessAuthentication: "",
        accessComplexity: "",
        accessVector: "",
        cvss: 0,
        cweCode: 0,
        cweName: "",
        impactAvailability: "",
        impactConfidentiality: "",
        impactIntegrity: "",
        modDate: "",
        pubDate: "",
        summary: "",
      }
    };
    return response;
  },

  async getMany(
    request: GetManyRequest,
  ): Promise<DeepPartial<GetManyResponse>> {
    const response: GetManyResponse = {cves: []};
    return response;
  },

  async create(
    request: CreateRequest,
  ): Promise<DeepPartial<CreateResponse>> {
    const response: CreateResponse = {id: ""};
    return response;
  },

  async update(
    request: UpdateRequest,
  ): Promise<DeepPartial<UpdateResponse>> {
    const response: UpdateResponse = {result: true};
    return response;
  },

  async delete(
    request: DeleteRequest,
  ): Promise<DeepPartial<DeleteResponse>> {
    const response: DeleteResponse = {result: true};
    return response;
  },

};
